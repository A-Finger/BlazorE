@using BlazorE.Catalog.Authentication
@using BlazorE.Catalog.Components.ModalWindows
@inject IUserAccess userAccess
@inject AuthenticationStateProvider authStateProvider

<div class="top-row ps-3 navbar navbar-dark">
	<div class="container-fluid">
		<a class="navbar-brand" href="">Predictor</a>
		<button title="Menu" class="navbar-toggler" @onclick="ToggleNavMenu">
			<span class="navbar-toggler-icon"></span>
		</button>
	</div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
	<nav class="flex-column">
		<AuthorizeView>
			<Authorized>
				<div class="nav-item px-3">
					<NavLink class="nav-link" href="" Match="NavLinkMatch.All">
						<span class="oi oi-home" aria-hidden="true"></span> Home
					</NavLink>
				</div>
				<div class="nav-item px-3">
					<NavLink class="nav-link" href="counter">
						<span class="oi oi-plus" aria-hidden="true"></span> Counter
					</NavLink>
				</div>

				<div class="nav-item px-3">
					<NavLink class="nav-link" href="fetchdata">
						<span class="oi oi-list-rich" aria-hidden="true"></span> Fetch data
					</NavLink>
				</div>
				<div class="nav-item px-3">
					<NavLink class="nav-link" href="" @onclick="LogOut">
						<span class="oi oi-account-logout" aria-hidden="true"></span> Sing out
					</NavLink>
				</div>
			</Authorized>
			<NotAuthorized>
				<div class="nav-item px-3">
					<NavLink class="nav-link" href="" @onclick="OpenLoginWindow">
						<span class="oi oi-account-login" aria-hidden="true"></span> Sing in
					</NavLink>
				</div>
			</NotAuthorized>
		</AuthorizeView>

	</nav>
</div>

@if (IsLoginWindow)
{
	<LoginWindow OnLogin="OnLoginWindow" OnClose="CloseLoginWindow" />
}

@code {
	private bool collapseNavMenu = true;

	private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

	private void ToggleNavMenu()
	{
		collapseNavMenu = !collapseNavMenu;
	}

	private bool IsLoginWindow { get; set; } = false;

	private void CloseLoginWindow()
	{
		IsLoginWindow = false;
	}

	private void OnLoginWindow(bool state)
	{
		IsLoginWindow = state;
	}

	private void OpenLoginWindow()
	{
		IsLoginWindow = true;
	}

	private async Task LogOut()
	{
		var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
		await customAuthStateProvider.UpdateAuthenticationStateAsync(null!);
	}
}
