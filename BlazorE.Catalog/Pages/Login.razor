@page "/login"
@using BlazorE.Catalog.Authentication
@inject IUserAccess userAccess
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navigation

<PageTitle>Login</PageTitle>

<form>
    <!-- Email input -->
    <div class="form-outline mb-4">
        <input type="text" id="form2Example1" class="form-control" @bind="model.Login" />
        <label class="form-label" for="form2Example1">Email address</label>
    </div>

    <!-- Password input -->
    <div class="form-outline mb-4">
        <input type="password" id="form2Example2" class="form-control" @bind="model.Password" />
        <label class="form-label" for="form2Example2">Password</label>
    </div>

    <!-- 2 column grid layout for inline styling -->
    <div class="row mb-4">
        <div class="col d-flex justify-content-center">
            <!-- Checkbox -->
            <div class="form-check">
                <input class="form-check-input" type="checkbox" value="" id="form2Example31" checked />
                <label class="form-check-label" for="form2Example31"> Remember me </label>
            </div>
        </div>
    </div>

    <!-- Submit button -->
    <button type="button" class="btn btn-primary btn-block mb-4" @onclick="Authenticate">Sign in</button>

    <!-- Register buttons -->
    <div class="text-center">
        <p>Not a member? <a href="#!">Register</a></p>
        <p>or sign up with:</p>
        <button type="button" class="btn btn-link btn-floating mx-1">
            <i class="fab fa-facebook-f"></i>
        </button>

        <button type="button" class="btn btn-link btn-floating mx-1">
            <i class="fab fa-google"></i>
        </button>

        <button type="button" class="btn btn-link btn-floating mx-1">
            <i class="fab fa-twitter"></i>
        </button>

        <button type="button" class="btn btn-link btn-floating mx-1">
            <i class="fab fa-github"></i>
        </button>
    </div>
</form>

@code {

    private class Model {
        public string Login { get; set; } = null!;
        public string Password { get; set; } = null!;
    }

    private Model model = new();

    private async Task Authenticate()
    {
        var userAccount = await userAccess.GetByLoginAsync(model.Login);
        if (userAccount is null || userAccount.Password != model.Password)
        {
            await js.InvokeVoidAsync("alert", "Невірний Login або Password");
            return;
        }

        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationStateAsync(new UserSession 
            {
                UserName = userAccount.FirstName,
                Role = userAccount.UserRole.Value
            });
        navigation.NavigateTo("/",true);
    }
}
